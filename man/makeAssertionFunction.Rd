% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/makeAssertionFunction.R
\name{makeAssertionFunction}
\alias{makeAssertionFunction}
\title{Turn a Check into an Assertion}
\usage{
makeAssertionFunction(
  check.fun,
  c.fun = NULL,
  coerce = FALSE,
  env = parent.frame()
)
}
\arguments{
\item{check.fun}{[\code{function}]
Function which checks the input. Must return \code{TRUE} on success and a string with the error message otherwise.}

\item{c.fun}{[\code{character(1)}]
If not \code{NULL}, instead of calling the function \code{check.fun}, use \code{.Call} to call a C function \dQuote{c.fun} with the identical
set of parameters. The C function must be registered as a native symbol, see \code{\link[base]{.Call}}.
Useful if \code{check.fun} is just a simple wrapper.}

\item{coerce}{[\code{logical(1)}]\cr
If \code{TRUE}, injects some lines of code to convert numeric values to integer after an successful assertion.
Currently used in \code{\link{assertCount}}, \code{\link{assertInt}} and \code{\link{assertIntegerish}}.}

\item{env}{[\code{environment}]
The environment of the created function. Default is the \code{\link[base]{parent.frame}}.}
}
\description{
\code{makeAssertionFunction} can be used to automatically create
an assertion function based on a check function (see example). This is a
modification of \code{checkmate::makeAssertionFunction} that includes the
argument custom.msg in the assertion function.
}
\details{
The code is imported from \code{checkmate}. The modifications in the
code is marked. The argument use.namespace is deleted as
\code{checkmate::makeAssertion} and \code{checkmate::vname} always should
be used.
}
