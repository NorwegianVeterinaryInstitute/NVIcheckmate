% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/assert_character.R
\name{assert_character}
\alias{assert_character}
\title{Check if an argument is a vector of type character}
\usage{
assert_character(
  x,
  min.chars = NULL,
  pattern = NULL,
  fixed = NULL,
  ignore.case = FALSE,
  any.missing = TRUE,
  all.missing = TRUE,
  len = NULL,
  min.len = NULL,
  max.len = NULL,
  unique = FALSE,
  sorted = FALSE,
  names = NULL,
  null.ok = FALSE,
  .var.name = checkmate::vname(x),
  comment = NULL,
  add = NULL
)
}
\arguments{
\item{x}{[any]\cr
Object to check.}

\item{min.chars}{[\code{integer(1)}]\cr
Minimum number of characters for each element of \code{x}.}

\item{pattern}{[\code{character(1L)}]\cr
Regular expression as used in \code{\link[base:grep]{grepl}}.
All non-missing elements of \code{x} must comply to this pattern.}

\item{fixed}{[\code{character(1)}]\cr
Substring to detect in \code{x}. Will be used as \code{pattern} in \code{\link[base:grep]{grepl}}
with option \code{fixed} set to \code{TRUE}.
All non-missing elements of \code{x} must contain this substring.}

\item{ignore.case}{[\code{logical(1)}]\cr
See \code{\link[base:grep]{grepl}}. Default is \code{FALSE}.}

\item{any.missing}{[\code{logical(1)}]\cr
Are vectors with missing values allowed? Default is \code{TRUE}.}

\item{all.missing}{[\code{logical(1)}]\cr
Are vectors with no non-missing values allowed? Default is \code{TRUE}.
Note that empty vectors do not have non-missing values.}

\item{len}{[\code{integer(1)}]\cr
Exact expected length of \code{x}.}

\item{min.len}{[\code{integer(1)}]\cr
Minimal length of \code{x}.}

\item{max.len}{[\code{integer(1)}]\cr
Maximal length of \code{x}.}

\item{unique}{[\code{logical(1)}]\cr
Must all values be unique? Default is \code{FALSE}.}

\item{sorted}{[\code{logical(1)}]\cr
Elements must be sorted in ascending order. Missing values are ignored.}

\item{names}{[\code{character(1)}]\cr
Check for names. See \code{\link{checkNamed}} for possible values.
Default is \dQuote{any} which performs no check at all.
Note that you can use \code{\link{checkSubset}} to check for a specific set of names.}

\item{null.ok}{[\code{logical(1)}]\cr
If set to \code{TRUE}, \code{x} may also be \code{NULL}.
In this case only a type check of \code{x} is performed, all additional checks are disabled.}

\item{.var.name}{[\code{character(1)}]\cr
Name of the checked object to print in error messages. Defaults to
the heuristic implemented in \code{\link[checkmate]{vname}}.}

\item{comment}{[\code{character(1)}]\cr
Extra information to be appended to the standard error message in assertions.}

\item{add}{[\code{AssertCollection}]\cr
Collection to store assertions. See \code{\link[checkmate]{AssertCollection}}.}
}
\value{
If the check is successful, the function
\code{assert_character} return \code{x} invisibly.\cr
If the check is not successful,
\code{assert_character} throws an error message.
}
\description{
Performs assertions if an argument is a vector of type character.
}
\details{
The assertions are based on \code{checkmate::checkCharacter}. \code{NVIcheckmate::assert_character}
differs from \code{checkmate::assert_character} in including the argument \code{comment = }. The help
is updated to reflect the changes.

This function does not distinguish between
\code{NA}, \code{NA_integer_}, \code{NA_real_}, \code{NA_complex_}
\code{NA_character_} and \code{NaN}.
}
